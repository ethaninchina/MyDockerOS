user nginx;
worker_processes auto;
worker_cpu_affinity auto;
worker_rlimit_nofile 102400;

daemon off;

pid logs/nginx.pid; 

events {
	use epoll;
	worker_connections 102400;
	multi_accept on;
	#accept_mutex off;
}

############# TCP负载 end ############



http {
	sendfile on;
	tcp_nopush on;
	tcp_nodelay on;
	keepalive_timeout 65; #长连接timeout
    keepalive_requests 100; #单个客户端在 keep-alive 连接上可以发送的请求数量
	types_hash_max_size 2048; 
	server_tokens off; #关闭版本提示
	client_max_body_size 10M;
	# server_names_hash_bucket_size 64;
	# server_name_in_redirect off;

	 
#后端代理
    proxy_connect_timeout 300s;
    proxy_read_timeout 300s;
    proxy_send_timeout 300s;

#后端PHP
    fastcgi_connect_timeout 300s;
    fastcgi_send_timeout 300s;
    fastcgi_read_timeout 300s;
    fastcgi_buffer_size 128k;
    fastcgi_buffers 8 128k;
    fastcgi_busy_buffers_size 256k;
    fastcgi_temp_file_write_size 256k;
    fastcgi_intercept_errors on;
    include mime.types;
    default_type application/octet-stream;



#定义lua 模块位置 ;; 表示默认搜索 ;; 必须写
lua_package_path "/opt/openresty/lualib/resty/upstream/?.lua;/opt/openresty/lualib/resty/?.lua;/opt/openresty/nginx/conf/ngx_lua_waf/?.lua;;";
lua_package_cpath "/opt/openresty/lualib/?.so;;";

#nginx lua waf <<<>>> web防火墙
    lua_shared_dict limit 10m;
    init_by_lua_file  /opt/openresty/nginx/conf/ngx_lua_waf/init.lua;
    access_by_lua_file /opt/openresty/nginx/conf/ngx_lua_waf/waf.lua;

########## http 健康检查 start ###########
#  lua_shared_dict healthcheck 5m; # 定义健康检查内存空间
#  lua_socket_log_errors off;
        
#     init_worker_by_lua_block {
#         local hc = require "resty.upstream.healthcheck"
#         local ok, err = hc.spawn_checker{
#             shm = "healthcheck",  -- #定义  lua_shared_dict 名
#             upstream = "load_test1", -- #定义 upstream 名称
#             type = "http",

#             http_req = "HEAD / HTTP/1.0\r\nHost: load_test1\r\n\r\n",
#                     -- # http请求检查 load_test

#             interval = 1000,  -- # 每2秒检查一次
#             timeout = 1000,   -- # 超时1秒
#             fall = 3,  -- # 失败最大3次后标注为 down机
#             rise = 2,  -- # 请求多少次OK后代表成功
#             valid_statuses = {200, 302, 301, 304},  -- #列有效的HTTP状态代码
#             concurrency = 1,  -- #用于测试请求的并发级别
#         }
#         -- #判断第二个upstream是否OK
#         ok, err = hc.spawn_checker{
#             shm = "healthcheck",  -- #定义  lua_shared_dict 名
#             upstream = "load_test2", -- #定义 upstream 名称
#             type = "http",

#             http_req = "HEAD / HTTP/1.0\r\nHost: load_test2\r\n\r\n",
#                     -- # http请求检查 load_test

#             interval = 1000,  -- # 每2秒检查一次
#             timeout = 1000,   -- # 超时1秒
#             fall = 3,  -- # 失败最大3次后标注为 down机
#             rise = 2,  -- # 请求多少次OK后代表成功
#             valid_statuses = {200, 302, 301, 304},  -- #列有效的HTTP状态代码
#             concurrency = 1,  -- #用于测试请求的并发级别
#         }
# 	if not ok then
#             ngx.log(ngx.ERR, "failed to spawn health checker: ", err)
#             return
#         end
# }

########## http 健康检查 end ###########

#定义www访问速率 15个连接/s
    limit_req_zone $binary_remote_addr zone=www_one:5m rate=15r/s;

#定义download访问速率
    limit_req_zone $binary_remote_addr zone=down_one:2m rate=1r/s;

#定义download下载时连接数
limit_conn_zone $binary_remote_addr zone=perip:5m;


log_format main	'[$time_local] '
		'[client_ip]: $remote_addr '
                '[proxy_ip]: $http_x_forwarded_for '               
                '[server_protocol]: $server_protocol '
                '[ssl_protocol]: $ssl_protocol '
                '[ssl_cipher]:  $ssl_cipher '
                '[domain]: $host '
                '[server_port]: $server_port '
                '[status]: $status '
                '[method]: $request_method '
                '[url]: $uri '
                '[args]: $args '
                '[post_data]: $request_body '
                '[host]: $server_addr '
                '[size]: $body_bytes_sent '
                '[responsetime]: $request_time '
                '[referer]: $http_referer '
                '[useragent]: $http_user_agent '
                '[upstreamip]: $upstream_addr ';


#access_log logs/access_nginx.log main;
access_log off;
error_log  logs/error_nginx.log;
log_not_found off;
 
	gzip on;
	gzip_disable "msie6";

	gzip_vary on;
	gzip_proxied any;
	gzip_comp_level 6;
	gzip_buffers 16 8k;
	gzip_http_version 1.1;
	gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript image/jpeg image/gif image/png;

include block.ip;
include vhost/*.conf;
}

