```
user  nginx;
worker_processes auto; #进程数
worker_cpu_affinity auto; #绑定进程到cpu
worker_rlimit_nofile 65535; #最大文件打开数（ulimit -n)


pid        logs/nginx.pid;


events {
    use epoll;
    worker_connections  65535; #单个worker进程可以允许同时处理的连接数
    multi_accept on;
}

#TCP模块
# stream {
# 	server {
# 	listen 19000;
# 	proxy_pass 127.0.0.1:8066;
# 	}
# }

#http模块
http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format  json  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"'
                      'host: "$server_addr" '
                      'domain: "$http_host" '
                      '"$server_protocol" '
                      'uri: "$request_uri" ' 
                      'method: $request_method '
                      'status: "$status" '
                      'upstatus:"$upstream_status" '
		              'post_data: "$request_body" '
                      'upaddr: "$upstream_addr" '
                      'request_time: "$request_time" '
                      'upstream_response_time: "$upstream_response_time" ';


    access_log  logs/access.log  json;
    error_log  logs/error.log debug;



    sendfile        on;
    tcp_nopush      on;
    tcp_nodelay 	on;
    keepalive_timeout  65; #保持长连接的时间 默认65
    keepalive_requests 1000; #每个连接最大请求数 默认100
    server_tokens off; #关闭版本提示

    client_header_timeout 60s; #客户端向服务端发送一个完整的 request header 的超时时间,默认60s
    client_body_timeout 120s; #客户端与服务端建立连接后发送 request body 的超时时间。如果客户端在指定时间内没有发送任何内容，Nginx 返回 HTTP 408（Request Timed Out）,默认60s
    proxy_connect_timeout 300s; #后端服务器连接的超时时间_发起握手等候响应超时时间,默认60s
    proxy_read_timeout 300s; #连接成功后_等候后端服务器响应时间(后端服务器处理请求的时间),默认60s
    proxy_send_timeout 300s; #后端服务器数据回传时间_就是在规定时间之内后端服务器必须传完所有的数据,默认60s
    send_timeout 60s; #nginx传输到客户端的超时时间,默认60s,正常情况下 毫秒内传完了

    proxy_buffer_size 64k; #是设置缓存冲的大小。
    proxy_buffers 4 128k; #设置缓冲区的数量和大小
    proxy_busy_buffers_size 256k;
    client_max_body_size 10m; #客户端最大的 request body 大小
    client_body_buffer_size 1024k; #客户端 request body 缓冲区大小

    gzip  on; #开启gzip
    gzip_min_length 1k; #低于1kb的资源不压缩
    gzip_comp_level 2; #压缩级别【1-9】，越大压缩率越高，同时消耗cpu资源也越多
    gzip_types text/plain application/javascript application/x-javascript text/javascript text/xml text/css;  #需要压缩哪些响应类型的资源，多个空格隔开
    gzip_disable "MSIE [1-6]\.";  #配置禁用gzip条件，支持正则。此处表示ie6及以下不启用gzip（因为ie低版本不支持）
    gzip_vary on;  #是否添加“Vary: Accept-Encoding”响应头


include /usr/local/openresty/nginx/conf/vhost/*.conf;
   
}
```
