user  nginx;
worker_processes auto;
worker_cpu_affinity auto;
worker_rlimit_nofile 65535;
pid        logs/nginx.pid;

events {
    use epoll;
    worker_connections  100000;
    multi_accept on;
}

http {
#lua upstream 健康检查
    lua_package_path "/usr/local/openresty/nginx/conf/lua-resty-upstream-healthcheck/?.lua;;";
    lua_shared_dict healthcheck 1m;
    lua_socket_log_errors off;

init_worker_by_lua_block {
    local hc = require "resty.upstream.healthcheck"
    local ok, err = hc.spawn_checker{
        shm = "healthcheck", 
        upstream = "upstream_80uncle", 
        type = "http",
        http_req = "GET / HTTP/1.1\r\nHost: www.80uncle.com\r\n\r\n",
        interval = 2000,
        timeout = 1000,
        fall = 3,
        rise = 2,
        valid_statuses = {200, 302},
        concurrency = 5,
    }

	ok, err = hc.spawn_checker{
        shm = "healthcheck",
        upstream = "upstream_80uncle.com",
        type = "http",
        http_req = "GET / HTTP/1.1\r\nHost: www.80uncle.com\r\n\r\n",
        interval = 2000,
        timeout = 1000,
        fall = 3,
        rise = 2,
        valid_statuses = {200, 302},
        concurrency = 5,
    }


    if not ok then
        ngx.log(ngx.ERR, "failed to spawn health checker: ", err)
        return
    end

}


    include       mime.types;
    default_type  application/octet-stream;

    log_format  json  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"'
                      'host: "$server_addr" '
                      'domain: "$http_host" '
                      '"$server_protocol" '
                      'uri: "$request_uri" ' 
                      'method: $request_method '
                      'status: "$status" '
                      'upstatus:"$upstream_status" '
		              'post_data: "$request_body" '
                      'upaddr: "$upstream_addr" '
                      'request_time: "$request_time" '
                      'upstream_response_time: "$upstream_response_time" ';

    access_log  /dev/null;
    error_log  /dev/null;

    sendfile        on;
    tcp_nopush      on;
    tcp_nodelay 	on;
    keepalive_timeout  65; #保持长连接的时间 默认65
    keepalive_requests 1000; #每个连接最大请求数 默认100
    server_tokens off; #关闭版本提示

    client_header_timeout 60s; #客户端向服务端发送一个完整的 request header 的超时时间,默认60s
    client_body_timeout 120s; #客户端与服务端建立连接后发送 request body 的超时时间。如果客户端在指定时间内没有发送任何内容，Nginx 返回 HTTP 408（Request Timed Out）,默认60s
    proxy_connect_timeout 300s; #后端服务器连接的超时时间_发起握手等候响应超时时间,默认60s
    proxy_read_timeout 300s; #连接成功后_等候后端服务器响应时间(后端服务器处理请求的时间),默认60s
    proxy_send_timeout 300s; #后端服务器数据回传时间_就是在规定时间之内后端服务器必须传完所有的数据,默认60s
    #send_timeout 60s; #nginx传输到客户端的超时时间,默认60s,正常情况下 毫秒内传完了

    proxy_buffer_size 64k; #是设置缓存冲的大小。
    proxy_buffers 4 128k; #设置缓冲区的数量和大小
    proxy_busy_buffers_size 256k;
    client_max_body_size 10m; #客户端最大的 request body 大小
    client_body_buffer_size 1024k; #客户端 request body 缓冲区大小

	gzip on;
	gzip_min_length 1k;
	gzip_buffers 4 16k;
	gzip_http_version 1.1;
	gzip_comp_level 2;
	gzip_types text/plain application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;
	gzip_vary on;
	gzip_disable "MSIE [1-6]\.";

include /usr/local/openresty/nginx/conf/vhost/*.conf;
}
